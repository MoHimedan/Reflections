How did viewing a diff between two versions of a file help you see the bug that was introduced?

It highlighted the rows which were modified so I didn't have to visually look for typos. Additionally, it explicitly gave told me whether the row was an addition or a removal.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It would provide roll-back points and remove the fear of lost code and hesitation to modify existing code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros are your ability to distinguish between related and unrelated changes. Cons are human error is much more likely in forgetting to save, etc.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

This is probably for concurrency reasons. You don't want to check out every file and prevent people from working on them in the mean time. Also, you're always only modifying one file at a time. Because GIT allows you to make a local copy and apply changes to it, it doesn't matter how many of the files you modify.

How can you use the commands git log and git diff to view the history of files?

git log shows the history of changes, their associated comments and timestamps. git diff highlights the changes between two commits.

How might using version control make you more confident to make changes that could break something?

You can always go back, and in some ways, it makes identifying erroneous changes much simpler.

Now that you have your workspace set up, what do you want to try using Git for?

I'd like to use Git for all my iterative development.